server:
  port: 8081

spring:
  application:
    name: user-service
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.127.102:8848
        namespace: public
        group: DEFAULT_GROUP
        metadata:
          version: 1.0.0
          management.context-path: /actuator
  # ShardingSphere 分库分表配置
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/db_user0?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: 123456
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/db_user1?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: 123456
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
    rules:
      sharding:
        tables:
          users:
            actual-data-nodes: ds$->{0..1}.users_$->{0..1}
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: users-table-inline
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: users-database-inline
        sharding-algorithms:
          users-database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{ (user_id & 0xFFF) % 2 }
          users-table-inline:
            type: INLINE
            props:
              algorithm-expression: users_$->{ ((user_id >> 22) & 0x3FF) % 2 }
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 1
    props:
      sql-show: true

  # Redis 配置
  redis:
    host: 192.168.127.102
    port: 6379
    password:
    database: 0
    timeout: 3000ms
    jedis:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 3000ms

  # RabbitMQ 配置
  rabbitmq:
    host: 192.168.127.102
    port: 5672
    username: admin
    password: admin
    virtual-host: /
    connection-timeout: 15000
    publisher-confirm-type: correlated  # 开启发送确认
    publisher-returns: true   # 开启失败返回
    template:
      mandatory: true   #强制路由

# Seata 配置
seata:
  enable-auto-data-source-proxy: false
  application-id: user-service
  tx-service-group: user-service-group
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: 192.168.127.102:8848
      group: DEFAULT_GROUP
      namespace: public
      cluster: default
      username: "nacos"
      password: "nacos"
      context-path: ""
  config:
    type: nacos
    nacos:
      server-addr: 192.168.127.102:8848
      namespace: public
      group: SEATA_GROUP
      username: "nacos"
      password: "nacos"
      data-id: seataServer.properties

# MyBatis Plus 配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
  mapper-locations: classpath*:mapper/*.xml

# 日志配置
logging:
  level:
    com.ajiang.userservice: debug
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n"

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always