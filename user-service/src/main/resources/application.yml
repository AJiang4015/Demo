server:
  port: 8081

spring:
  application:
    name: user-service

  # 配置中心
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
      config:
        server-addr: 127.0.0.1:8848
        file-extension: yaml

    # RocketMQ配置
    stream:
      rocketmq:
        binder:
          name-server: 127.0.0.1:9876
      bindings:
        log-output:
          destination: operation-logs
          content-type: application/json

  # ShardingSphere分库分表配置（2库×2表）
  shardingsphere:
    datasource:
      names: ds0, ds1
      # 数据库1配置（对应db_user0）
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/db_user0?useUnicode=true&characterEncoding=utf-8&useSSL=false
        username: root
        password: 123456
        connection-timeout: 30000
        idle-timeout: 600000
        max-lifetime: 1800000
        maximum-pool-size: 15
        minimum-idle: 5
      # 数据库2配置（对应db_user1）
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/db_user1?useUnicode=true&characterEncoding=utf-8&useSSL=false
        username: root
        password: 123456
        connection-timeout: 30000
        idle-timeout: 600000
        max-lifetime: 1800000
        maximum-pool-size: 15
        minimum-idle: 5
    rules:
      sharding:
        # 分片算法配置
        sharding-algorithms:
          # 分库算法（按user_id % 2）
          database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
          # 分表算法（按user_id % 2）
          table-inline:
            type: INLINE
            props:
              algorithm-expression: users_$->{user_id % 2}
        # 分布式序列配置
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123
        # 分片表配置
        tables:
          users:
            # 真实数据节点：2个库 × 2张表
            actual-data-nodes: ds$->{0..1}.users_$->{0..1}
            # 分库策略
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: database-inline
            # 分表策略
            table-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: table-inline
            # 主键生成策略
            key-generate-strategy:
              column: user_id
              key-generator-name: snowflake
    # 打印SQL
    props:
      sql-show: true

  # 移除JPA配置（使用MyBatis-Plus）
  # 添加MyBatis-Plus配置
  mybatis-plus:
    configuration:
      map-underscore-to-camel-case: true
      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    global-config:
      db-config:
        id-type: assign_id
        logic-delete-field: deleted
        logic-delete-value: 1
        logic-not-delete-value: 0

# Seata分布式事务配置
seata:
  enabled: true
  application-id: ${spring.application.name}
  tx-service-group: user_service_tx_group
  service:
    vgroup-mapping:
      user_service_tx_group: default
  registry:
    type: nacos
    nacos:
      server-addr: 127.0.0.1:8848
      namespace: ""
      group: SEATA_GROUP

# Feign配置
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
  compression:
    request:
      enabled: true
    response:
      enabled: true

# JWT配置
jwt:
  secret: AJiang
  expiration: 86400 # 24小时

# 日志配置
logging:
  level:
    com.example.userservice: DEBUG
    org.springframework.web: INFO
    org.apache.shardingsphere: DEBUG
    com.alibaba.nacos: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"